SHELL=/bin/bash
WORKDIR=work
DISTDIR=dist
ESMDIR=$(DISTDIR)/esm
WORKERSDIR=$(DISTDIR)/cjs

TARGET_ESM_BASE = $(notdir $(basename src/libImage.cpp))
TARGET_ESM = $(ESMDIR)/$(TARGET_ESM_BASE).js
TARGET_WORKERS = $(WORKERSDIR)/$(TARGET_ESM_BASE).js

# Docker specific settings
LIBEXIF_PATH = libexif
LIBEXIF_INCLUDE = -Ilibexif -Ilibexif/libexif
OPENCV_PATH = opencv
OPENCV_INCLUDE = -Iopencv/include -Iopencv/modules/core/include -Iopencv/modules/imgproc/include

# In Docker environment use libexif generated via autoreconf
EXIF_SOURCES := $(wildcard $(LIBEXIF_PATH)/libexif/*.c) \
                $(wildcard $(LIBEXIF_PATH)/libexif/canon/*.c) \
                $(wildcard $(LIBEXIF_PATH)/libexif/fuji/*.c) \
                $(wildcard $(LIBEXIF_PATH)/libexif/olympus/*.c) \
                $(wildcard $(LIBEXIF_PATH)/libexif/pentax/*.c)

# In Docker environment use files generated by official OpenCV build script
OPENCV_JS_LIB := opencv/build_js/bin/opencv.js
OPENCV_JS_WASM := opencv/build_js/bin/opencv.wasm

# Use OpenCV.js headers
OPENCV_LIBS := opencv/build_js/lib/libopencv_core.a opencv/build_js/lib/libopencv_imgproc.a
OPENCV_INCLUDE := -Iopencv/modules/core/include -Iopencv/modules/imgproc/include -Iopencv/build_js
SOURCE_FILE = src/libImage.cpp

CFLAGS = -O3 -msimd128 -sSTACK_SIZE=5MB \
        $(OPENCV_INCLUDE) \
        -Ilibwebp -Ilibwebp/src $(LIBEXIF_INCLUDE) \
        -sUSE_LIBJPEG=1 -sUSE_LIBPNG=1 \
        -DOPENCV_WEBP_ONLY

CFLAGS_ASM = --bind \
             -s WASM=1 -s ALLOW_MEMORY_GROWTH=1 -s ENVIRONMENT=web -s DYNAMIC_EXECUTION=0 -s MODULARIZE=1

WEBP_SOURCES := $(wildcard libwebp/src/dsp/*.c) \
                $(wildcard libwebp/src/enc/*.c) \
                $(wildcard libwebp/src/utils/*.c) \
                $(wildcard libwebp/src/dec/*.c) \
                $(wildcard libwebp/sharpyuv/*.c)

# Use WebAssembly OpenCV libraries
WEBP_OBJECTS := $(WEBP_SOURCES:.c=.o)
EXIF_OBJECTS := $(EXIF_SOURCES:.c=.o)

.PHONY: all esm workers clean docker-prep

all: esm workers

$(WEBP_OBJECTS): %.o: %.c
	@emcc $(CFLAGS) -c $< -o $@

$(EXIF_OBJECTS): %.o: %.c
	@emcc $(CFLAGS) $(LIBEXIF_INCLUDE) -c $< -o $@

$(WORKDIR):
	@mkdir -p $(WORKDIR)

$(WORKDIR)/webp.a: $(WORKDIR) $(WEBP_OBJECTS)
	@emar rcs $@ $(WEBP_OBJECTS)

$(WORKDIR)/libexif.a: $(WORKDIR) $(EXIF_OBJECTS)
	@emar rcs $@ $(EXIF_OBJECTS)

$(ESMDIR) $(WORKERSDIR):
	@mkdir -p $@

esm: $(TARGET_ESM)

$(TARGET_ESM): $(SOURCE_FILE) $(WORKDIR)/webp.a $(WORKDIR)/libexif.a | $(ESMDIR)
	emcc $(CFLAGS) $(OPENCV_INCLUDE) -o $@ $< $(WORKDIR)/webp.a $(WORKDIR)/libexif.a $(OPENCV_LIBS) \
       $(CFLAGS_ASM)  -s EXPORT_ES6=1

workers: $(TARGET_WORKERS)

$(TARGET_WORKERS): $(SOURCE_FILE) $(WORKDIR)/webp.a $(WORKDIR)/libexif.a | $(WORKERSDIR)
	emcc $(CFLAGS) $(OPENCV_INCLUDE) -o $@ $< $(WORKDIR)/webp.a $(WORKDIR)/libexif.a $(OPENCV_LIBS) \
       $(CFLAGS_ASM)
	@rm $(WORKERSDIR)/$(TARGET_ESM_BASE).wasm

clean:
	@echo Cleaning up...
	@rm -rf $(WORKDIR) $(ESMDIR) $(WORKERSDIR)

# Special preparation for Docker environment
docker-prep:
	@echo "Preparing Docker environment..."
	@if [ ! -f libexif/Makefile ]; then \
		echo "Configuring libexif for WebAssembly..."; \
		cd libexif && autoreconf -fiv && \
		emconfigure ./configure --disable-shared --enable-static --disable-nls --disable-docs; \
	fi